/* Emotional Memory Agent Styles */
.emotional-memory-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  transition: background-color 0.5s ease;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
}

/* Header */
.emotional-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 1.5rem 2rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.emotional-header h1 {
  font-size: 2rem;
  font-weight: 300;
}

.current-state {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.mood-orb {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

.mood-emoji {
  font-size: 2.5rem;
  margin-bottom: 0.25rem;
}

.mood-label {
  font-size: 0.9rem;
  font-weight: bold;
  color: white;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
}

/* Main Content */
.emotional-main {
  flex: 1;
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 2rem;
  padding: 2rem;
  max-width: 1400px;
  margin: 0 auto;
  width: 100%;
}

/* Chat Section */
.chat-section {
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  height: 700px;
}

.messages-container {
  flex: 1;
  padding: 1.5rem;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.message {
  max-width: 80%;
  padding: 1rem 1.5rem;
  border-radius: 20px;
  position: relative;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.message.user {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  align-self: flex-end;
  border-bottom-right-radius: 5px;
}

.message.bot {
  background: #f8f9fa;
  color: #333;
  align-self: flex-start;
  border-bottom-left-radius: 5px;
  border-left: 4px solid #667eea;
}

.message-content {
  font-size: 1rem;
  line-height: 1.5;
  margin-bottom: 0.5rem;
}

.message-meta {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.8rem;
  opacity: 0.8;
}

.message-mood {
  font-weight: bold;
}

.voice-indicator {
  background: rgba(255, 255, 255, 0.2);
  padding: 0.2rem 0.5rem;
  border-radius: 10px;
}

.message-timestamp {
  font-size: 0.75rem;
  opacity: 0.7;
}

/* Input Section */
.input<thinking>
The task involves enhancing the emotional agent demo to ensure that all emotional shifts, including mood changes and their visual representations, are displayed on a single page where the chat is happening. 

### Current State:
1. **EmotionalMemoryAgent.js**: This component has been created to handle emotional memory and display emotional shifts.
2. **VoiceEmotionalAgent.js**: This component is designed for voice analysis but needs to be integrated with the emotional memory features.
3. **User Feedback**: The user wants to ensure that all emotional shifts are visible, including background color changes, mood orb color changes, and the emotional arc as a memory of every emotional shift.

### Next Steps:
1. **Integrate Emotional Memory**: Ensure that the emotional memory features are displayed alongside the chat interface.
2. **Update UI**: Make sure the UI reflects the emotional shifts in real-time, including background color changes and mood indicators.
3. **Combine Components**: Ensure that the chat, emotional arc, and emotional memory are all visible on the same page.

I will now proceed to update the **EmotionalMemoryAgent.js** to ensure that it integrates well with the chat interface and displays all necessary emotional information on the same page.
</thinking>

<edit_file>
<path>frontend/src/components/EmotionalMemoryAgent.js</path>
<content>
import React, { useState, useEffect, useRef } from "react";
import "./EmotionalMemoryAgent.css";

function EmotionalMemoryAgent() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isListening, setIsListening] = useState(false);
  const [currentMood, setCurrentMood] = useState("neutral");
  const [backgroundColor, setBackgroundColor] = useState("#f5f5f5");
  const [voiceEmotion, setVoiceEmotion] = useState(null);
  const [emotionalArc, setEmotionalArc] = useState([]);
  
  const recognitionRef = useRef(null);

  useEffect(() => {
    // Initialize with welcome message
    setMessages([{
      text: "Welcome to Emotional Memory Agent. I'll track every emotional shift and create a beautiful memory of your emotional journey.",
      sender: "bot",
      timestamp: new Date(),
      mood: "neutral",
      voiceEmotion: "neutral"
    }]);
    
    // Initialize emotional arc with starting point
    setEmotionalArc([{
      timestamp: new Date(),
      mood: "neutral",
      trigger: "conversation_start"
    }]);
  }, []);

  const updateEmotionalState = (newMood, voiceEmotion = null) => {
    const previousMood = currentMood;
    
    // Create emotional shift record
    const emotionalShift = {
      timestamp: new Date(),
      previousMood,
      newMood,
      voiceEmotion,
      id: Date.now()
    };
    
    // Update emotional arc
    setEmotionalArc(prev => [...prev, {
      timestamp: new Date(),
      mood: newMood,
      trigger: "user_message"
    }]);
    
    // Update current state
    setCurrentMood(newMood);
    updateBackgroundColor(newMood);
  };

  const updateBackgroundColor = (mood) => {
    const baseColors = {
      neutral: "#f5f5f5",
      happy: "#fff3e0",
      excited: "#ffe0b2",
      sad: "#e3f2fd",
      angry: "#ffebee",
      calm: "#e8f5e8"
    };
    
    const color = baseColors[mood] || baseColors.neutral;
    setBackgroundColor(color);
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    const textEmotion = analyzeTextEmotion(input);
    const finalEmotion = voiceEmotion || textEmotion;
    
    const userMessage = { 
      text: input, 
      sender: "user", 
      timestamp: new Date(),
      mood: finalEmotion,
      voiceEmotion: voiceEmotion || "none"
    };
    
    setMessages(prev => [...prev, userMessage]);
    updateEmotionalState(finalEmotion, voiceEmotion);

    try {
      const response = await fetch("http://127.0.0.1:5000/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          message: input,
          voiceEmotion: voiceEmotion
        }),
      });

      const data = await response.json();
      
      const botMessage = { 
        text: data.reply, 
        sender: "bot",
        timestamp: new Date(),
        mood: data.reply.includes("sad") ? "sad" : "neutral"
      };
      
      setMessages(prev => [...prev, botMessage]);
      updateEmotionalState(botMessage.mood);
      
    } catch (error) {
      console.error("Error:", error);
      const errorMessage = { 
        text: "I'm having trouble connecting. Please try again.", 
        sender: "bot",
        timestamp: new Date(),
        mood: "neutral"
      };
      setMessages(prev => [...prev, errorMessage]);
    }

    setInput("");
    setVoiceEmotion(null);
  };

  const analyzeTextEmotion = (text) => {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes("excited") || lowerText.includes("amazing")) {
      return "excited";
    } else if (lowerText.includes("happy")) {
      return "happy";
    } else if (lowerText.includes("sad")) {
      return "sad";
    } else if (lowerText.includes("angry")) {
      return "angry";
    }
    return "neutral";
  };

  return (
    <div className="emotional-memory-container" style={{ backgroundColor }}>
      <header className="emotional-header">
        <h1>ðŸ§  Emotional Memory Agent</h1>
      </header>

      <main className="emotional-main">
        <div className="chat-section">
          <div className="messages-container">
            {messages.map((msg, idx) => (
              <div key={idx} className={`message ${msg.sender}`}>
                <div className="message-content">{msg.text}</div>
                <div className="message-meta">
                  <span className="message-mood">{msg.mood}</span>
                  {msg.voiceEmotion && msg.voiceEmotion !== "none" && (
                    <span className="voice-indicator">ðŸŽ¤ {msg.voiceEmotion}</span>
                  )}
                  <span className="message-timestamp">
                    {msg.timestamp.toLocaleTimeString()}
                  </span>
                </div>
              </div>
            ))}
          </div>

          <div className="input-section">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              placeholder="Share your feelings..."
              className="emotional-input"
            />
            <button onClick={handleSend} className="send-button">ðŸ’¬ Send</button>
          </div>
        </div>

        <div className="memory-section">
          <h3>ðŸŒˆ Emotional Journey</h3>
          <div className="arc-visualization">
            {emotionalArc.map((point, idx) => (
              <div key={idx} className="arc-point">
                <div className="arc-mood">{point.mood}</div>
                <div className="arc-time">{point.timestamp.toLocaleTimeString()}</div>
              </div>
            ))}
          </div>
        </div>
      </main>
    </div>
  );
}

export default EmotionalMemoryAgent;
