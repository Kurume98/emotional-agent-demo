{"ast":null,"code":"var _jsxFileName = \"/Users/kurumeaugustine/emotional-agent-demo/frontend/src/components/VoiceEmotionalAgent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./VoiceEmotionalAgent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VoiceEmotionalAgent() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [mood, setMood] = useState(\"neutral\");\n  const [backgroundColor, setBackgroundColor] = useState(\"#f5f5f5\");\n  const [voiceEmotion, setVoiceEmotion] = useState(null);\n  const [combinedEmotion, setCombinedEmotion] = useState(\"neutral\");\n  const [audioData, setAudioData] = useState(null);\n  const recognitionRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n  useEffect(() => {\n    // Initialize with welcome message\n    setMessages([{\n      text: \"Welcome to Voice Emotional Intelligence. I'll analyze both your words and voice tone to understand your emotions.\",\n      sender: \"bot\",\n      timestamp: new Date()\n    }]);\n  }, []);\n  useEffect(() => {\n    // Initialize speech recognition\n    if (\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.lang = \"en-US\";\n      recognitionRef.current.onresult = event => {\n        const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n        setInput(transcript);\n\n        // Analyze voice tone from audio data\n        if (audioData) {\n          analyzeVoiceTone(audioData);\n        }\n      };\n      recognitionRef.current.onerror = event => {\n        console.error(\"Speech recognition error:\", event.error);\n        setIsListening(false);\n      };\n    }\n  }, [audioData]);\n  const startVoiceAnalysis = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100\n        }\n      });\n      mediaStreamRef.current = stream;\n\n      // Set up audio context for analysis\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 2048;\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      source.connect(analyserRef.current);\n\n      // Start speech recognition\n      if (recognitionRef.current) {\n        recognitionRef.current.start();\n      }\n      setIsListening(true);\n\n      // Start real-time audio analysis\n      analyzeAudioStream();\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n      alert(\"Please allow microphone access to use voice analysis.\");\n    }\n  };\n  const stopVoiceAnalysis = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    setIsListening(false);\n    setVoiceEmotion(null);\n  };\n  const analyzeAudioStream = () => {\n    if (!analyserRef.current) return;\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const analyze = () => {\n      if (!isListening) return;\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      // Calculate audio features\n      const average = dataArray.reduce((a, b) => a + b) / bufferLength;\n      const variance = dataArray.reduce((a, b) => a + Math.pow(b - average, 2), 0) / bufferLength;\n      const energy = Math.sqrt(variance);\n\n      // Detect voice emotion based on audio characteristics\n      const detectedEmotion = detectVoiceEmotion(average, energy, dataArray);\n      setVoiceEmotion(detectedEmotion);\n\n      // Update combined emotion\n      updateCombinedEmotion(detectedEmotion, null);\n      setAudioData({\n        average,\n        energy,\n        frequencies: [...dataArray]\n      });\n      requestAnimationFrame(analyze);\n    };\n    analyze();\n  };\n  const detectVoiceEmotion = (average, energy, frequencies) => {\n    // Simplified voice emotion detection based on audio characteristics\n    const highFreqEnergy = frequencies.slice(frequencies.length * 0.7).reduce((a, b) => a + b, 0);\n    const lowFreqEnergy = frequencies.slice(0, frequencies.length * 0.3).reduce((a, b) => a + b, 0);\n\n    // Voice emotion detection logic\n    if (energy > 50 && highFreqEnergy > lowFreqEnergy * 2) {\n      return \"excited\"; // High energy, high pitch\n    } else if (energy > 40 && lowFreqEnergy > highFreqEnergy * 2) {\n      return \"angry\"; // High energy, low pitch\n    } else if (energy < 20 && lowFreqEnergy < 10) {\n      return \"sad\"; // Low energy, low pitch\n    } else if (energy > 25 && energy < 35) {\n      return \"calm\"; // Moderate energy\n    } else {\n      return \"neutral\";\n    }\n  };\n  const analyzeVoiceTone = audioData => {\n    // Additional analysis when we have the final audio\n    if (audioData) {\n      const {\n        average,\n        energy\n      } = audioData;\n      const emotion = detectVoiceEmotion(average, energy, audioData.frequencies || []);\n      setVoiceEmotion(emotion);\n      return emotion;\n    }\n    return \"neutral\";\n  };\n  const updateCombinedEmotion = (voiceEmotion, textEmotion) => {\n    let combined = \"neutral\";\n\n    // Priority: voice emotion > text emotion > neutral\n    if (voiceEmotion && voiceEmotion !== \"neutral\") {\n      combined = voiceEmotion;\n    } else if (textEmotion) {\n      combined = textEmotion;\n    }\n    setCombinedEmotion(combined);\n    updateMoodDisplay(combined);\n  };\n  const updateMoodDisplay = emotion => {\n    let newMood = \"neutral\";\n    let newColor = \"#f5f5f5\";\n    switch (emotion) {\n      case \"excited\":\n      case \"happy\":\n        newMood = \"excited\";\n        newColor = \"#fff3e0\";\n        break;\n      case \"angry\":\n        newMood = \"angry\";\n        newColor = \"#ffebee\";\n        break;\n      case \"sad\":\n        newMood = \"sad\";\n        newColor = \"#e3f2fd\";\n        break;\n      case \"calm\":\n        newMood = \"calm\";\n        newColor = \"#e8f5e8\";\n        break;\n      default:\n        newMood = \"neutral\";\n        newColor = \"#f5f5f5\";\n    }\n    setMood(newMood);\n    setBackgroundColor(newColor);\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: \"user\",\n      timestamp: new Date(),\n      voiceEmotion: voiceEmotion || \"none\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input,\n          voiceEmotion: voiceEmotion,\n          audioData: audioData\n        })\n      });\n      const data = await response.json();\n\n      // Analyze text emotion from response\n      const textEmotion = analyzeTextEmotion(data.reply);\n\n      // Update combined emotion\n      updateCombinedEmotion(voiceEmotion, textEmotion);\n      const botMessage = {\n        text: data.reply,\n        sender: \"bot\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      const errorMessage = {\n        text: \"I'm having trouble connecting. Please try again.\",\n        sender: \"bot\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n    setInput(\"\");\n    setVoiceEmotion(null);\n  };\n  const analyzeTextEmotion = text => {\n    const lowerText = text.toLowerCase();\n    if (lowerText.includes(\"sad\") || lowerText.includes(\"sorry\") || lowerText.includes(\"upset\")) {\n      return \"sad\";\n    } else if (lowerText.includes(\"happy\") || lowerText.includes(\"joy\") || lowerText.includes(\"great\")) {\n      return \"happy\";\n    } else if (lowerText.includes(\"angry\") || lowerText.includes(\"frustrated\")) {\n      return \"angry\";\n    } else if (lowerText.includes(\"calm\") || lowerText.includes(\"peaceful\")) {\n      return \"calm\";\n    }\n    return \"neutral\";\n  };\n  const getMoodEmoji = () => {\n    switch (mood) {\n      case \"excited\":\n        return \"🤗\";\n      case \"happy\":\n        return \"😊\";\n      case \"sad\":\n        return \"😢\";\n      case \"angry\":\n        return \"😠\";\n      case \"calm\":\n        return \"😌\";\n      default:\n        return \"😐\";\n    }\n  };\n  const getMoodColor = () => {\n    switch (mood) {\n      case \"excited\":\n        return \"#ff9800\";\n      case \"happy\":\n        return \"#4caf50\";\n      case \"sad\":\n        return \"#2196f3\";\n      case \"angry\":\n        return \"#f44336\";\n      case \"calm\":\n        return \"#9c27b0\";\n      default:\n        return \"#9e9e9e\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-agent-container\",\n    style: {\n      backgroundColor\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"voice-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFA4 Voice Emotional Intelligence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mood-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-orb\",\n          style: {\n            backgroundColor: getMoodColor()\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mood-emoji\",\n            children: getMoodEmoji()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mood-label\",\n            children: mood.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), voiceEmotion && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-emotion\",\n          children: [\"Voice: \", voiceEmotion]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"voice-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this), msg.voiceEmotion && msg.voiceEmotion !== \"none\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"voice-tag\",\n              children: [\"\\uD83C\\uDFA4 \", msg.voiceEmotion]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-timestamp\",\n              children: msg.timestamp.toLocaleTimeString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            onKeyDown: e => e.key === \"Enter\" && handleSend(),\n            placeholder: \"Type your message or use voice...\",\n            className: \"message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"control-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSend,\n              className: \"send-button\",\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: isListening ? stopVoiceAnalysis : startVoiceAnalysis,\n              className: `voice-button ${isListening ? 'listening' : ''}`,\n              children: isListening ? '⏹️ Stop' : '🎤 Voice'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-status\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"listening-animation\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Listening and analyzing your voice...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Voice Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Current Mood:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 16\n            }, this), \" \", mood]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this), voiceEmotion && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Voice Emotion:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 33\n            }, this), \" \", voiceEmotion]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Combined Analysis:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 16\n            }, this), \" \", combinedEmotion]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instructions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"How it works:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Click the voice button to start recording\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Speak naturally - we'll analyze your tone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Background color changes based on detected emotion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Combines voice tone + text analysis for accuracy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n}\n_s(VoiceEmotionalAgent, \"1AKPnv3dUxEa/JFKgahFvbsvJ4c=\");\n_c = VoiceEmotionalAgent;\nexport default VoiceEmotionalAgent;\nvar _c;\n$RefreshReg$(_c, \"VoiceEmotionalAgent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","VoiceEmotionalAgent","_s","messages","setMessages","input","setInput","isListening","setIsListening","mood","setMood","backgroundColor","setBackgroundColor","voiceEmotion","setVoiceEmotion","combinedEmotion","setCombinedEmotion","audioData","setAudioData","recognitionRef","audioContextRef","analyserRef","mediaStreamRef","text","sender","timestamp","Date","window","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","transcript","Array","from","results","map","result","join","analyzeVoiceTone","onerror","console","error","startVoiceAnalysis","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","sampleRate","AudioContext","webkitAudioContext","createAnalyser","fftSize","source","createMediaStreamSource","connect","start","analyzeAudioStream","alert","stopVoiceAnalysis","stop","getTracks","forEach","track","close","bufferLength","frequencyBinCount","dataArray","Uint8Array","analyze","getByteFrequencyData","average","reduce","a","b","variance","Math","pow","energy","sqrt","detectedEmotion","detectVoiceEmotion","updateCombinedEmotion","frequencies","requestAnimationFrame","highFreqEnergy","slice","length","lowFreqEnergy","emotion","textEmotion","combined","updateMoodDisplay","newMood","newColor","handleSend","trim","userMessage","prev","response","fetch","method","headers","body","JSON","stringify","message","data","json","analyzeTextEmotion","reply","botMessage","errorMessage","lowerText","toLowerCase","includes","getMoodEmoji","getMoodColor","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","msg","idx","toLocaleTimeString","type","value","onChange","e","target","onKeyDown","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/kurumeaugustine/emotional-agent-demo/frontend/src/components/VoiceEmotionalAgent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./VoiceEmotionalAgent.css\";\n\nfunction VoiceEmotionalAgent() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [mood, setMood] = useState(\"neutral\");\n  const [backgroundColor, setBackgroundColor] = useState(\"#f5f5f5\");\n  const [voiceEmotion, setVoiceEmotion] = useState(null);\n  const [combinedEmotion, setCombinedEmotion] = useState(\"neutral\");\n  const [audioData, setAudioData] = useState(null);\n  \n  const recognitionRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n\n  useEffect(() => {\n    // Initialize with welcome message\n    setMessages([{\n      text: \"Welcome to Voice Emotional Intelligence. I'll analyze both your words and voice tone to understand your emotions.\",\n      sender: \"bot\",\n      timestamp: new Date()\n    }]);\n  }, []);\n\n  useEffect(() => {\n    // Initialize speech recognition\n    if (\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.lang = \"en-US\";\n\n      recognitionRef.current.onresult = (event) => {\n        const transcript = Array.from(event.results)\n          .map(result => result[0])\n          .map(result => result.transcript)\n          .join('');\n        \n        setInput(transcript);\n        \n        // Analyze voice tone from audio data\n        if (audioData) {\n          analyzeVoiceTone(audioData);\n        }\n      };\n\n      recognitionRef.current.onerror = (event) => {\n        console.error(\"Speech recognition error:\", event.error);\n        setIsListening(false);\n      };\n    }\n  }, [audioData]);\n\n  const startVoiceAnalysis = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100\n        } \n      });\n      \n      mediaStreamRef.current = stream;\n      \n      // Set up audio context for analysis\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 2048;\n      \n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      source.connect(analyserRef.current);\n      \n      // Start speech recognition\n      if (recognitionRef.current) {\n        recognitionRef.current.start();\n      }\n      \n      setIsListening(true);\n      \n      // Start real-time audio analysis\n      analyzeAudioStream();\n      \n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n      alert(\"Please allow microphone access to use voice analysis.\");\n    }\n  };\n\n  const stopVoiceAnalysis = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n    \n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    \n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    \n    setIsListening(false);\n    setVoiceEmotion(null);\n  };\n\n  const analyzeAudioStream = () => {\n    if (!analyserRef.current) return;\n    \n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    \n    const analyze = () => {\n      if (!isListening) return;\n      \n      analyserRef.current.getByteFrequencyData(dataArray);\n      \n      // Calculate audio features\n      const average = dataArray.reduce((a, b) => a + b) / bufferLength;\n      const variance = dataArray.reduce((a, b) => a + Math.pow(b - average, 2), 0) / bufferLength;\n      const energy = Math.sqrt(variance);\n      \n      // Detect voice emotion based on audio characteristics\n      const detectedEmotion = detectVoiceEmotion(average, energy, dataArray);\n      setVoiceEmotion(detectedEmotion);\n      \n      // Update combined emotion\n      updateCombinedEmotion(detectedEmotion, null);\n      \n      setAudioData({ average, energy, frequencies: [...dataArray] });\n      \n      requestAnimationFrame(analyze);\n    };\n    \n    analyze();\n  };\n\n  const detectVoiceEmotion = (average, energy, frequencies) => {\n    // Simplified voice emotion detection based on audio characteristics\n    const highFreqEnergy = frequencies.slice(frequencies.length * 0.7).reduce((a, b) => a + b, 0);\n    const lowFreqEnergy = frequencies.slice(0, frequencies.length * 0.3).reduce((a, b) => a + b, 0);\n    \n    // Voice emotion detection logic\n    if (energy > 50 && highFreqEnergy > lowFreqEnergy * 2) {\n      return \"excited\"; // High energy, high pitch\n    } else if (energy > 40 && lowFreqEnergy > highFreqEnergy * 2) {\n      return \"angry\"; // High energy, low pitch\n    } else if (energy < 20 && lowFreqEnergy < 10) {\n      return \"sad\"; // Low energy, low pitch\n    } else if (energy > 25 && energy < 35) {\n      return \"calm\"; // Moderate energy\n    } else {\n      return \"neutral\";\n    }\n  };\n\n  const analyzeVoiceTone = (audioData) => {\n    // Additional analysis when we have the final audio\n    if (audioData) {\n      const { average, energy } = audioData;\n      const emotion = detectVoiceEmotion(average, energy, audioData.frequencies || []);\n      setVoiceEmotion(emotion);\n      return emotion;\n    }\n    return \"neutral\";\n  };\n\n  const updateCombinedEmotion = (voiceEmotion, textEmotion) => {\n    let combined = \"neutral\";\n    \n    // Priority: voice emotion > text emotion > neutral\n    if (voiceEmotion && voiceEmotion !== \"neutral\") {\n      combined = voiceEmotion;\n    } else if (textEmotion) {\n      combined = textEmotion;\n    }\n    \n    setCombinedEmotion(combined);\n    updateMoodDisplay(combined);\n  };\n\n  const updateMoodDisplay = (emotion) => {\n    let newMood = \"neutral\";\n    let newColor = \"#f5f5f5\";\n\n    switch (emotion) {\n      case \"excited\":\n      case \"happy\":\n        newMood = \"excited\";\n        newColor = \"#fff3e0\";\n        break;\n      case \"angry\":\n        newMood = \"angry\";\n        newColor = \"#ffebee\";\n        break;\n      case \"sad\":\n        newMood = \"sad\";\n        newColor = \"#e3f2fd\";\n        break;\n      case \"calm\":\n        newMood = \"calm\";\n        newColor = \"#e8f5e8\";\n        break;\n      default:\n        newMood = \"neutral\";\n        newColor = \"#f5f5f5\";\n    }\n\n    setMood(newMood);\n    setBackgroundColor(newColor);\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { \n      text: input, \n      sender: \"user\", \n      timestamp: new Date(),\n      voiceEmotion: voiceEmotion || \"none\"\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n\n    try {\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          message: input,\n          voiceEmotion: voiceEmotion,\n          audioData: audioData\n        }),\n      });\n\n      const data = await response.json();\n      \n      // Analyze text emotion from response\n      const textEmotion = analyzeTextEmotion(data.reply);\n      \n      // Update combined emotion\n      updateCombinedEmotion(voiceEmotion, textEmotion);\n      \n      const botMessage = { \n        text: data.reply, \n        sender: \"bot\",\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      \n    } catch (error) {\n      console.error(\"Error:\", error);\n      const errorMessage = { \n        text: \"I'm having trouble connecting. Please try again.\", \n        sender: \"bot\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n\n    setInput(\"\");\n    setVoiceEmotion(null);\n  };\n\n  const analyzeTextEmotion = (text) => {\n    const lowerText = text.toLowerCase();\n    \n    if (lowerText.includes(\"sad\") || lowerText.includes(\"sorry\") || lowerText.includes(\"upset\")) {\n      return \"sad\";\n    } else if (lowerText.includes(\"happy\") || lowerText.includes(\"joy\") || lowerText.includes(\"great\")) {\n      return \"happy\";\n    } else if (lowerText.includes(\"angry\") || lowerText.includes(\"frustrated\")) {\n      return \"angry\";\n    } else if (lowerText.includes(\"calm\") || lowerText.includes(\"peaceful\")) {\n      return \"calm\";\n    }\n    return \"neutral\";\n  };\n\n  const getMoodEmoji = () => {\n    switch (mood) {\n      case \"excited\": return \"🤗\";\n      case \"happy\": return \"😊\";\n      case \"sad\": return \"😢\";\n      case \"angry\": return \"😠\";\n      case \"calm\": return \"😌\";\n      default: return \"😐\";\n    }\n  };\n\n  const getMoodColor = () => {\n    switch (mood) {\n      case \"excited\": return \"#ff9800\";\n      case \"happy\": return \"#4caf50\";\n      case \"sad\": return \"#2196f3\";\n      case \"angry\": return \"#f44336\";\n      case \"calm\": return \"#9c27b0\";\n      default: return \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div className=\"voice-agent-container\" style={{ backgroundColor }}>\n      <header className=\"voice-header\">\n        <h1>🎤 Voice Emotional Intelligence</h1>\n        <div className=\"mood-indicator\">\n          <div className=\"mood-orb\" style={{ backgroundColor: getMoodColor() }}>\n            <div className=\"mood-emoji\">{getMoodEmoji()}</div>\n            <div className=\"mood-label\">{mood.toUpperCase()}</div>\n          </div>\n          {voiceEmotion && (\n            <div className=\"voice-emotion\">\n              Voice: {voiceEmotion}\n            </div>\n          )}\n        </div>\n      </header>\n\n      <main className=\"voice-main\">\n        <div className=\"chat-section\">\n          <div className=\"messages-container\">\n            {messages.map((msg, idx) => (\n              <div key={idx} className={`message ${msg.sender}`}>\n                <div className=\"message-content\">{msg.text}</div>\n                {msg.voiceEmotion && msg.voiceEmotion !== \"none\" && (\n                  <div className=\"voice-tag\">🎤 {msg.voiceEmotion}</div>\n                )}\n                <div className=\"message-timestamp\">\n                  {msg.timestamp.toLocaleTimeString()}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"voice-controls\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && handleSend()}\n              placeholder=\"Type your message or use voice...\"\n              className=\"message-input\"\n            />\n            \n            <div className=\"control-buttons\">\n              <button onClick={handleSend} className=\"send-button\">\n                Send\n              </button>\n              \n              <button \n                onClick={isListening ? stopVoiceAnalysis : startVoiceAnalysis}\n                className={`voice-button ${isListening ? 'listening' : ''}`}\n              >\n                {isListening ? '⏹️ Stop' : '🎤 Voice'}\n              </button>\n            </div>\n          </div>\n\n          {isListening && (\n            <div className=\"voice-status\">\n              <div className=\"listening-animation\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n              <p>Listening and analyzing your voice...</p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"voice-info\">\n          <h3>Voice Analysis</h3>\n          <div className=\"analysis-display\">\n            <p><strong>Current Mood:</strong> {mood}</p>\n            {voiceEmotion && <p><strong>Voice Emotion:</strong> {voiceEmotion}</p>}\n            <p><strong>Combined Analysis:</strong> {combinedEmotion}</p>\n          </div>\n          \n          <div className=\"instructions\">\n            <h4>How it works:</h4>\n            <ul>\n              <li>Click the voice button to start recording</li>\n              <li>Speak naturally - we'll analyze your tone</li>\n              <li>Background color changes based on detected emotion</li>\n              <li>Combines voice tone + text analysis for accuracy</li>\n            </ul>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default VoiceEmotionalAgent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}