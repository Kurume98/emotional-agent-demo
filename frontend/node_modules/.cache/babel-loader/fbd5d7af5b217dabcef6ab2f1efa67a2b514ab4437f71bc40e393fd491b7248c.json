{"ast":null,"code":"var _jsxFileName = \"/Users/kurumeaugustine/emotional-agent-demo/frontend/src/components/UnifiedEmotionalAgent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport \"./UnifiedEmotionalAgent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UnifiedEmotionalAgent() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [currentMood, setCurrentMood] = useState(\"neutral\");\n  const [backgroundColor, setBackgroundColor] = useState(\"#f5f5f5\");\n  const [voiceEmotion, setVoiceEmotion] = useState(null);\n  const [emotionalArc, setEmotionalArc] = useState([]);\n  const [unifiedEmotionalState, setUnifiedEmotionalState] = useState({\n    mood: \"neutral\",\n    intensity: 0.5,\n    voiceData: null,\n    memoryData: null\n  });\n  const recognitionRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n\n  // Initialize unified system\n  useEffect(() => {\n    const welcomeMessage = {\n      text: \"Welcome to the Unified Emotional Intelligence System. Your voice and memories are now connected to create a living emotional arc.\",\n      sender: \"bot\",\n      timestamp: new Date(),\n      mood: \"excited\",\n      voiceEmotion: \"neutral\"\n    };\n    setMessages([welcomeMessage]);\n\n    // Initialize emotional arc with starting point\n    const initialArcPoint = {\n      timestamp: new Date(),\n      mood: \"excited\",\n      intensity: 0.8,\n      trigger: \"system_unified\",\n      voiceData: null,\n      memoryData: {\n        type: \"system_init\"\n      }\n    };\n    setEmotionalArc([initialArcPoint]);\n    updateUnifiedState(initialArcPoint);\n  }, []);\n\n  // Unified state updater\n  const updateUnifiedState = useCallback(newState => {\n    setUnifiedEmotionalState(prev => ({\n      ...prev,\n      ...newState,\n      timestamp: new Date()\n    }));\n\n    // Update visual representation\n    updateVisualDisplay(newState);\n  }, []);\n\n  // Visual display updater\n  const updateVisualDisplay = state => {\n    const moodColors = {\n      excited: {\n        bg: \"#fff3e0\",\n        orb: \"#ff9800\"\n      },\n      happy: {\n        bg: \"#e8f5e8\",\n        orb: \"#4caf50\"\n      },\n      sad: {\n        bg: \"#e3f2fd\",\n        orb: \"#2196f3\"\n      },\n      angry: {\n        bg: \"#ffebee\",\n        orb: \"#f44336\"\n      },\n      calm: {\n        bg: \"#f3e5f5\",\n        orb: \"#9c27b0\"\n      },\n      anxious: {\n        bg: \"#fff8e1\",\n        orb: \"#ff9800\"\n      },\n      neutral: {\n        bg: \"#f5f5f5\",\n        orb: \"#9e9e9e\"\n      }\n    };\n    const colors = moodColors[state.mood] || moodColors.neutral;\n    setBackgroundColor(colors.bg);\n    setCurrentMood(state.mood);\n  };\n\n  // Voice analysis integration\n  const startVoiceAnalysis = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100\n        }\n      });\n      mediaStreamRef.current = stream;\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 2048;\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      source.connect(analyserRef.current);\n\n      // Initialize speech recognition\n      if (\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window) {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        recognitionRef.current = new SpeechRecognition();\n        recognitionRef.current.continuous = true;\n        recognitionRef.current.interimResults = true;\n        recognitionRef.current.lang = \"en-US\";\n        recognitionRef.current.onresult = event => {\n          const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n          setInput(transcript);\n        };\n        recognitionRef.current.start();\n      }\n      setIsListening(true);\n      analyzeAudioStream();\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n  const analyzeAudioStream = () => {\n    if (!analyserRef.current) return;\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const analyze = () => {\n      if (!isListening) return;\n      analyserRef.current.getByteFrequencyData(dataArray);\n      const average = dataArray.reduce((a, b) => a + b) / bufferLength;\n      const energy = Math.sqrt(dataArray.reduce((a, b) => a + Math.pow(b - average, 2), 0) / bufferLength);\n      const voiceEmotion = detectVoiceEmotion(average, energy, dataArray);\n      setVoiceEmotion(voiceEmotion);\n\n      // Create voice data for memory\n      const voiceData = {\n        average,\n        energy,\n        emotion: voiceEmotion,\n        frequencies: [...dataArray]\n      };\n      updateUnifiedState({\n        voiceData,\n        mood: voiceEmotion || currentMood,\n        intensity: Math.min(energy / 100, 1)\n      });\n      requestAnimationFrame(analyze);\n    };\n    analyze();\n  };\n  const detectVoiceEmotion = (average, energy, frequencies) => {\n    const highFreqEnergy = frequencies.slice(frequencies.length * 0.7).reduce((a, b) => a + b, 0);\n    const lowFreqEnergy = frequencies.slice(0, frequencies.length * 0.3).reduce((a, b) => a + b, 0);\n    if (energy > 50 && highFreqEnergy > lowFreqEnergy * 2) {\n      return \"excited\";\n    } else if (energy > 40 && lowFreqEnergy > highFreqEnergy * 2) {\n      return \"angry\";\n    } else if (energy < 20) {\n      return \"sad\";\n    } else if (energy > 25 && energy < 35) {\n      return \"calm\";\n    } else {\n      return \"neutral\";\n    }\n  };\n  const stopVoiceAnalysis = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    setIsListening(false);\n    setVoiceEmotion(null);\n  };\n\n  // Memory integration\n  const addToEmotionalArc = data => {\n    var _emotionalArc;\n    const arcPoint = {\n      timestamp: new Date(),\n      mood: data.mood || currentMood,\n      intensity: data.intensity || 0.5,\n      trigger: data.trigger || \"user_input\",\n      voiceData: data.voiceData || null,\n      memoryData: {\n        type: data.type || \"message\",\n        content: data.content || input,\n        previousMood: ((_emotionalArc = emotionalArc[emotionalArc.length - 1]) === null || _emotionalArc === void 0 ? void 0 : _emotionalArc.mood) || \"neutral\"\n      }\n    };\n    setEmotionalArc(prev => [...prev, arcPoint]);\n    updateUnifiedState(arcPoint);\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    // Analyze text emotion\n    const textEmotion = analyzeTextEmotion(input);\n    const finalEmotion = voiceEmotion || textEmotion;\n    const userMessage = {\n      text: input,\n      sender: \"user\",\n      timestamp: new Date(),\n      mood: finalEmotion,\n      voiceEmotion: voiceEmotion || \"none\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Add to emotional arc\n    addToEmotionalArc({\n      mood: finalEmotion,\n      intensity: voiceEmotion ? 0.8 : 0.5,\n      trigger: \"user_message\",\n      voiceData: unifiedEmotionalState.voiceData,\n      content: input,\n      type: \"user_input\"\n    });\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/unified-chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input,\n          voiceEmotion: voiceEmotion,\n          currentMood: currentMood,\n          emotionalArc: emotionalArc\n        })\n      });\n      const data = await response.json();\n      const botEmotion = analyzeTextEmotion(data.reply);\n\n      // Add bot response to emotional arc\n      addToEmotionalArc({\n        mood: botEmotion,\n        intensity: 0.6,\n        trigger: \"bot_response\",\n        content: data.reply,\n        type: \"bot_response\"\n      });\n      const botMessage = {\n        text: data.reply,\n        sender: \"bot\",\n        timestamp: new Date(),\n        mood: botEmotion\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      const errorMessage = {\n        text: \"I'm having trouble connecting. Please try again.\",\n        sender: \"bot\",\n        timestamp: new Date(),\n        mood: \"neutral\"\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n    setInput(\"\");\n    setVoiceEmotion(null);\n  };\n  const analyzeTextEmotion = text => {\n    const lowerText = text.toLowerCase();\n    if (lowerText.includes(\"excited\") || lowerText.includes(\"amazing\") || lowerText.includes(\"wonderful\")) {\n      return \"excited\";\n    } else if (lowerText.includes(\"happy\") || lowerText.includes(\"joy\") || lowerText.includes(\"great\")) {\n      return \"happy\";\n    } else if (lowerText.includes(\"sad\") || lowerText.includes(\"sorry\") || lowerText.includes(\"upset\")) {\n      return \"sad\";\n    } else if (lowerText.includes(\"angry\") || lowerText.includes(\"frustrated\")) {\n      return \"angry\";\n    } else if (lowerText.includes(\"calm\") || lowerText.includes(\"peaceful\")) {\n      return \"calm\";\n    } else if (lowerText.includes(\"anxious\") || lowerText.includes(\"worried\")) {\n      return \"anxious\";\n    }\n    return \"neutral\";\n  };\n\n  // Render emotional arc visualization\n  const renderEmotionalArc = () => {\n    if (emotionalArc.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unified-arc-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83C\\uDF0A Living Emotional Arc\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arc-timeline\",\n        children: emotionalArc.map((point, idx) => {\n          const isActive = idx === emotionalArc.length - 1;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `arc-node ${isActive ? 'active' : ''} ${point.mood}`,\n            style: {\n              backgroundColor: `hsl(${getHueForMood(point.mood)}, 70%, ${50 + point.intensity * 30}%)`,\n              transform: `scale(${1 + point.intensity * 0.2})`,\n              boxShadow: `0 0 ${20 + point.intensity * 30}px hsl(${getHueForMood(point.mood)}, 70%, 50%)`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"node-emoji\",\n              children: getMoodEmoji(point.mood)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"node-time\",\n              children: point.timestamp.toLocaleTimeString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"node-trigger\",\n              children: point.trigger\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }, this), point.voiceData && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"voice-indicator\",\n              children: [\"\\uD83C\\uDFA4 Voice: \", point.voiceData.emotion]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 19\n            }, this), point.memoryData && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"memory-indicator\",\n              children: [\"\\uD83E\\uDDE0 \", point.memoryData.type]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arc-flow\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"arc-svg\",\n          viewBox: \"0 0 400 100\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: `M 0 50 Q ${emotionalArc.length * 50} 20 ${emotionalArc.length * 50} 50`,\n            stroke: \"url(#gradient)\",\n            strokeWidth: \"3\",\n            fill: \"none\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"defs\", {\n            children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n              id: \"gradient\",\n              x1: \"0%\",\n              y1: \"0%\",\n              x2: \"100%\",\n              y2: \"0%\",\n              children: emotionalArc.map((point, idx) => /*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: `${idx / emotionalArc.length * 100}%`,\n                stopColor: `hsl(${getHueForMood(point.mood)}, 70%, 50%)`\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this);\n  };\n  const getHueForMood = mood => {\n    const hues = {\n      excited: 45,\n      happy: 120,\n      sad: 210,\n      angry: 0,\n      calm: 270,\n      anxious: 60,\n      neutral: 0\n    };\n    return hues[mood] || 0;\n  };\n  const getMoodEmoji = mood => {\n    const emojis = {\n      excited: \"🤗\",\n      happy: \"😊\",\n      sad: \"😢\",\n      angry: \"😠\",\n      calm: \"😌\",\n      anxious: \"😰\",\n      neutral: \"😐\"\n    };\n    return emojis[mood] || \"😐\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unified-agent-container\",\n    style: {\n      backgroundColor\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"unified-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFAD Unified Emotional Intelligence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"state-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unified-orb\",\n          style: {\n            backgroundColor: `hsl(${getHueForMood(currentMood)}, 70%, 50%)`,\n            boxShadow: `0 0 30px hsl(${getHueForMood(currentMood)}, 70%, 50%)40`\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"orb-emoji\",\n            children: getMoodEmoji(currentMood)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"orb-mood\",\n            children: currentMood.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"state-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Voice: \", voiceEmotion || \"none\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Memory: \", emotionalArc.length, \" states\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Intensity: \", (unifiedEmotionalState.intensity * 100).toFixed(0), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"unified-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"interaction-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `unified-message ${msg.sender}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-meta\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mood-badge\",\n                style: {\n                  backgroundColor: `hsl(${getHueForMood(msg.mood)}, 70%, 80%)`\n                },\n                children: [getMoodEmoji(msg.mood), \" \", msg.mood]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 19\n              }, this), msg.voiceEmotion && msg.voiceEmotion !== \"none\" && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"voice-badge\",\n                children: [\"\\uD83C\\uDFA4 \", msg.voiceEmotion]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"timestamp\",\n                children: msg.timestamp.toLocaleTimeString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unified-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            onKeyDown: e => e.key === \"Enter\" && handleSend(),\n            placeholder: \"Speak or type your feelings...\",\n            className: \"unified-text-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"unified-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSend,\n              className: \"unified-send\",\n              children: \"\\uD83D\\uDCAC Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: isListening ? stopVoiceAnalysis : startVoiceAnalysis,\n              className: `unified-voice ${isListening ? 'active' : ''}`,\n              children: isListening ? '⏹️ Stop Voice' : '🎤 Start Voice'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-feedback\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"listening-animation\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Voice analysis active - detecting emotional tone...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-panel\",\n        children: [renderEmotionalArc(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uD83E\\uDDE0 Emotional Memory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"memory-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Total States: \", emotionalArc.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Current Intensity: \", (unifiedEmotionalState.intensity * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Voice Integration: \", voiceEmotion ? \"Active\" : \"Inactive\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n}\n_s(UnifiedEmotionalAgent, \"uFIS37uaM42Lqh9uYVNnbGT0s5M=\");\n_c = UnifiedEmotionalAgent;\nexport default UnifiedEmotionalAgent;\nvar _c;\n$RefreshReg$(_c, \"UnifiedEmotionalAgent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","UnifiedEmotionalAgent","_s","messages","setMessages","input","setInput","isListening","setIsListening","currentMood","setCurrentMood","backgroundColor","setBackgroundColor","voiceEmotion","setVoiceEmotion","emotionalArc","setEmotionalArc","unifiedEmotionalState","setUnifiedEmotionalState","mood","intensity","voiceData","memoryData","recognitionRef","audioContextRef","analyserRef","mediaStreamRef","welcomeMessage","text","sender","timestamp","Date","initialArcPoint","trigger","type","updateUnifiedState","newState","prev","updateVisualDisplay","state","moodColors","excited","bg","orb","happy","sad","angry","calm","anxious","neutral","colors","startVoiceAnalysis","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","sampleRate","current","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","source","createMediaStreamSource","connect","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","Array","from","results","map","result","join","start","analyzeAudioStream","error","console","bufferLength","frequencyBinCount","dataArray","Uint8Array","analyze","getByteFrequencyData","average","reduce","a","b","energy","Math","sqrt","pow","detectVoiceEmotion","emotion","frequencies","min","requestAnimationFrame","highFreqEnergy","slice","length","lowFreqEnergy","stopVoiceAnalysis","stop","getTracks","forEach","track","close","addToEmotionalArc","data","_emotionalArc","arcPoint","content","previousMood","handleSend","trim","textEmotion","analyzeTextEmotion","finalEmotion","userMessage","response","fetch","method","headers","body","JSON","stringify","message","json","botEmotion","reply","botMessage","errorMessage","lowerText","toLowerCase","includes","renderEmotionalArc","className","children","fileName","_jsxFileName","lineNumber","columnNumber","point","idx","isActive","style","getHueForMood","transform","boxShadow","getMoodEmoji","toLocaleTimeString","viewBox","d","stroke","strokeWidth","fill","id","x1","y1","x2","y2","offset","stopColor","hues","emojis","toUpperCase","toFixed","msg","value","onChange","e","target","onKeyDown","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/kurumeaugustine/emotional-agent-demo/frontend/src/components/UnifiedEmotionalAgent.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport \"./UnifiedEmotionalAgent.css\";\n\nfunction UnifiedEmotionalAgent() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [currentMood, setCurrentMood] = useState(\"neutral\");\n  const [backgroundColor, setBackgroundColor] = useState(\"#f5f5f5\");\n  const [voiceEmotion, setVoiceEmotion] = useState(null);\n  const [emotionalArc, setEmotionalArc] = useState([]);\n  const [unifiedEmotionalState, setUnifiedEmotionalState] = useState({\n    mood: \"neutral\",\n    intensity: 0.5,\n    voiceData: null,\n    memoryData: null\n  });\n  \n  const recognitionRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n\n  // Initialize unified system\n  useEffect(() => {\n    const welcomeMessage = {\n      text: \"Welcome to the Unified Emotional Intelligence System. Your voice and memories are now connected to create a living emotional arc.\",\n      sender: \"bot\",\n      timestamp: new Date(),\n      mood: \"excited\",\n      voiceEmotion: \"neutral\"\n    };\n    \n    setMessages([welcomeMessage]);\n    \n    // Initialize emotional arc with starting point\n    const initialArcPoint = {\n      timestamp: new Date(),\n      mood: \"excited\",\n      intensity: 0.8,\n      trigger: \"system_unified\",\n      voiceData: null,\n      memoryData: { type: \"system_init\" }\n    };\n    \n    setEmotionalArc([initialArcPoint]);\n    updateUnifiedState(initialArcPoint);\n  }, []);\n\n  // Unified state updater\n  const updateUnifiedState = useCallback((newState) => {\n    setUnifiedEmotionalState(prev => ({\n      ...prev,\n      ...newState,\n      timestamp: new Date()\n    }));\n    \n    // Update visual representation\n    updateVisualDisplay(newState);\n  }, []);\n\n  // Visual display updater\n  const updateVisualDisplay = (state) => {\n    const moodColors = {\n      excited: { bg: \"#fff3e0\", orb: \"#ff9800\" },\n      happy: { bg: \"#e8f5e8\", orb: \"#4caf50\" },\n      sad: { bg: \"#e3f2fd\", orb: \"#2196f3\" },\n      angry: { bg: \"#ffebee\", orb: \"#f44336\" },\n      calm: { bg: \"#f3e5f5\", orb: \"#9c27b0\" },\n      anxious: { bg: \"#fff8e1\", orb: \"#ff9800\" },\n      neutral: { bg: \"#f5f5f5\", orb: \"#9e9e9e\" }\n    };\n\n    const colors = moodColors[state.mood] || moodColors.neutral;\n    setBackgroundColor(colors.bg);\n    setCurrentMood(state.mood);\n  };\n\n  // Voice analysis integration\n  const startVoiceAnalysis = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100\n        } \n      });\n      \n      mediaStreamRef.current = stream;\n      \n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 2048;\n      \n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      source.connect(analyserRef.current);\n      \n      // Initialize speech recognition\n      if (\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window) {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        recognitionRef.current = new SpeechRecognition();\n        recognitionRef.current.continuous = true;\n        recognitionRef.current.interimResults = true;\n        recognitionRef.current.lang = \"en-US\";\n\n        recognitionRef.current.onresult = (event) => {\n          const transcript = Array.from(event.results)\n            .map(result => result[0])\n            .map(result => result.transcript)\n            .join('');\n          \n          setInput(transcript);\n        };\n\n        recognitionRef.current.start();\n      }\n      \n      setIsListening(true);\n      analyzeAudioStream();\n      \n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n\n  const analyzeAudioStream = () => {\n    if (!analyserRef.current) return;\n    \n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    \n    const analyze = () => {\n      if (!isListening) return;\n      \n      analyserRef.current.getByteFrequencyData(dataArray);\n      \n      const average = dataArray.reduce((a, b) => a + b) / bufferLength;\n      const energy = Math.sqrt(dataArray.reduce((a, b) => a + Math.pow(b - average, 2), 0) / bufferLength);\n      \n      const voiceEmotion = detectVoiceEmotion(average, energy, dataArray);\n      setVoiceEmotion(voiceEmotion);\n      \n      // Create voice data for memory\n      const voiceData = {\n        average,\n        energy,\n        emotion: voiceEmotion,\n        frequencies: [...dataArray]\n      };\n      \n      updateUnifiedState({\n        voiceData,\n        mood: voiceEmotion || currentMood,\n        intensity: Math.min(energy / 100, 1)\n      });\n      \n      requestAnimationFrame(analyze);\n    };\n    \n    analyze();\n  };\n\n  const detectVoiceEmotion = (average, energy, frequencies) => {\n    const highFreqEnergy = frequencies.slice(frequencies.length * 0.7).reduce((a, b) => a + b, 0);\n    const lowFreqEnergy = frequencies.slice(0, frequencies.length * 0.3).reduce((a, b) => a + b, 0);\n    \n    if (energy > 50 && highFreqEnergy > lowFreqEnergy * 2) {\n      return \"excited\";\n    } else if (energy > 40 && lowFreqEnergy > highFreqEnergy * 2) {\n      return \"angry\";\n    } else if (energy < 20) {\n      return \"sad\";\n    } else if (energy > 25 && energy < 35) {\n      return \"calm\";\n    } else {\n      return \"neutral\";\n    }\n  };\n\n  const stopVoiceAnalysis = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n    \n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    \n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    \n    setIsListening(false);\n    setVoiceEmotion(null);\n  };\n\n  // Memory integration\n  const addToEmotionalArc = (data) => {\n    const arcPoint = {\n      timestamp: new Date(),\n      mood: data.mood || currentMood,\n      intensity: data.intensity || 0.5,\n      trigger: data.trigger || \"user_input\",\n      voiceData: data.voiceData || null,\n      memoryData: {\n        type: data.type || \"message\",\n        content: data.content || input,\n        previousMood: emotionalArc[emotionalArc.length - 1]?.mood || \"neutral\"\n      }\n    };\n    \n    setEmotionalArc(prev => [...prev, arcPoint]);\n    updateUnifiedState(arcPoint);\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    // Analyze text emotion\n    const textEmotion = analyzeTextEmotion(input);\n    const finalEmotion = voiceEmotion || textEmotion;\n    \n    const userMessage = { \n      text: input, \n      sender: \"user\", \n      timestamp: new Date(),\n      mood: finalEmotion,\n      voiceEmotion: voiceEmotion || \"none\"\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    \n    // Add to emotional arc\n    addToEmotionalArc({\n      mood: finalEmotion,\n      intensity: voiceEmotion ? 0.8 : 0.5,\n      trigger: \"user_message\",\n      voiceData: unifiedEmotionalState.voiceData,\n      content: input,\n      type: \"user_input\"\n    });\n\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/unified-chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          message: input,\n          voiceEmotion: voiceEmotion,\n          currentMood: currentMood,\n          emotionalArc: emotionalArc\n        }),\n      });\n\n      const data = await response.json();\n      \n      const botEmotion = analyzeTextEmotion(data.reply);\n      \n      // Add bot response to emotional arc\n      addToEmotionalArc({\n        mood: botEmotion,\n        intensity: 0.6,\n        trigger: \"bot_response\",\n        content: data.reply,\n        type: \"bot_response\"\n      });\n      \n      const botMessage = { \n        text: data.reply, \n        sender: \"bot\",\n        timestamp: new Date(),\n        mood: botEmotion\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      \n    } catch (error) {\n      console.error(\"Error:\", error);\n      const errorMessage = { \n        text: \"I'm having trouble connecting. Please try again.\", \n        sender: \"bot\",\n        timestamp: new Date(),\n        mood: \"neutral\"\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n\n    setInput(\"\");\n    setVoiceEmotion(null);\n  };\n\n  const analyzeTextEmotion = (text) => {\n    const lowerText = text.toLowerCase();\n    \n    if (lowerText.includes(\"excited\") || lowerText.includes(\"amazing\") || lowerText.includes(\"wonderful\")) {\n      return \"excited\";\n    } else if (lowerText.includes(\"happy\") || lowerText.includes(\"joy\") || lowerText.includes(\"great\")) {\n      return \"happy\";\n    } else if (lowerText.includes(\"sad\") || lowerText.includes(\"sorry\") || lowerText.includes(\"upset\")) {\n      return \"sad\";\n    } else if (lowerText.includes(\"angry\") || lowerText.includes(\"frustrated\")) {\n      return \"angry\";\n    } else if (lowerText.includes(\"calm\") || lowerText.includes(\"peaceful\")) {\n      return \"calm\";\n    } else if (lowerText.includes(\"anxious\") || lowerText.includes(\"worried\")) {\n      return \"anxious\";\n    }\n    return \"neutral\";\n  };\n\n  // Render emotional arc visualization\n  const renderEmotionalArc = () => {\n    if (emotionalArc.length === 0) return null;\n\n    return (\n      <div className=\"unified-arc-container\">\n        <h3>🌊 Living Emotional Arc</h3>\n        <div className=\"arc-timeline\">\n          {emotionalArc.map((point, idx) => {\n            const isActive = idx === emotionalArc.length - 1;\n            return (\n              <div \n                key={idx} \n                className={`arc-node ${isActive ? 'active' : ''} ${point.mood}`}\n                style={{\n                  backgroundColor: `hsl(${getHueForMood(point.mood)}, 70%, ${50 + (point.intensity * 30)}%)`,\n                  transform: `scale(${1 + (point.intensity * 0.2)})`,\n                  boxShadow: `0 0 ${20 + (point.intensity * 30)}px hsl(${getHueForMood(point.mood)}, 70%, 50%)`\n                }}\n              >\n                <div className=\"node-emoji\">{getMoodEmoji(point.mood)}</div>\n                <div className=\"node-time\">{point.timestamp.toLocaleTimeString()}</div>\n                <div className=\"node-trigger\">{point.trigger}</div>\n                \n                {point.voiceData && (\n                  <div className=\"voice-indicator\">\n                    🎤 Voice: {point.voiceData.emotion}\n                  </div>\n                )}\n                \n                {point.memoryData && (\n                  <div className=\"memory-indicator\">\n                    🧠 {point.memoryData.type}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"arc-flow\">\n          <svg className=\"arc-svg\" viewBox=\"0 0 400 100\">\n            <path\n              d={`M 0 50 Q ${emotionalArc.length * 50} 20 ${emotionalArc.length * 50} 50`}\n              stroke=\"url(#gradient)\"\n              strokeWidth=\"3\"\n              fill=\"none\"\n            />\n            <defs>\n              <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                {emotionalArc.map((point, idx) => (\n                  <stop \n                    key={idx} \n                    offset={`${(idx / emotionalArc.length) * 100}%`}\n                    stopColor={`hsl(${getHueForMood(point.mood)}, 70%, 50%)`}\n                  />\n                ))}\n              </linearGradient>\n            </defs>\n          </svg>\n        </div>\n      </div>\n    );\n  };\n\n  const getHueForMood = (mood) => {\n    const hues = {\n      excited: 45,\n      happy: 120,\n      sad: 210,\n      angry: 0,\n      calm: 270,\n      anxious: 60,\n      neutral: 0\n    };\n    return hues[mood] || 0;\n  };\n\n  const getMoodEmoji = (mood) => {\n    const emojis = {\n      excited: \"🤗\",\n      happy: \"😊\",\n      sad: \"😢\",\n      angry: \"😠\",\n      calm: \"😌\",\n      anxious: \"😰\",\n      neutral: \"😐\"\n    };\n    return emojis[mood] || \"😐\";\n  };\n\n  return (\n    <div className=\"unified-agent-container\" style={{ backgroundColor }}>\n      <header className=\"unified-header\">\n        <h1>🎭 Unified Emotional Intelligence</h1>\n        <div className=\"state-display\">\n          <div \n            className=\"unified-orb\"\n            style={{\n              backgroundColor: `hsl(${getHueForMood(currentMood)}, 70%, 50%)`,\n              boxShadow: `0 0 30px hsl(${getHueForMood(currentMood)}, 70%, 50%)40`\n            }}\n          >\n            <div className=\"orb-emoji\">{getMoodEmoji(currentMood)}</div>\n            <div className=\"orb-mood\">{currentMood.toUpperCase()}</div>\n          </div>\n          \n          <div className=\"state-info\">\n            <div>Voice: {voiceEmotion || \"none\"}</div>\n            <div>Memory: {emotionalArc.length} states</div>\n            <div>Intensity: {(unifiedEmotionalState.intensity * 100).toFixed(0)}%</div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"unified-main\">\n        <div className=\"interaction-panel\">\n          <div className=\"messages-container\">\n            {messages.map((msg, idx) => (\n              <div key={idx} className={`unified-message ${msg.sender}`}>\n                <div className=\"message-content\">{msg.text}</div>\n                <div className=\"message-meta\">\n                  <span className=\"mood-badge\" style={{ backgroundColor: `hsl(${getHueForMood(msg.mood)}, 70%, 80%)` }}>\n                    {getMoodEmoji(msg.mood)} {msg.mood}\n                  </span>\n                  {msg.voiceEmotion && msg.voiceEmotion !== \"none\" && (\n                    <span className=\"voice-badge\">🎤 {msg.voiceEmotion}</span>\n                  )}\n                  <span className=\"timestamp\">{msg.timestamp.toLocaleTimeString()}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"unified-input\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && handleSend()}\n              placeholder=\"Speak or type your feelings...\"\n              className=\"unified-text-input\"\n            />\n            \n            <div className=\"unified-controls\">\n              <button onClick={handleSend} className=\"unified-send\">\n                💬 Send\n              </button>\n              \n              <button \n                onClick={isListening ? stopVoiceAnalysis : startVoiceAnalysis}\n                className={`unified-voice ${isListening ? 'active' : ''}`}\n              >\n                {isListening ? '⏹️ Stop Voice' : '🎤 Start Voice'}\n              </button>\n            </div>\n          </div>\n\n          {isListening && (\n            <div className=\"voice-feedback\">\n              <div className=\"listening-animation\">\n                <span></span>\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n              <p>Voice analysis active - detecting emotional tone...</p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"visualization-panel\">\n          {renderEmotionalArc()}\n          \n          <div className=\"memory-summary\">\n            <h4>🧠 Emotional Memory</h4>\n            <div className=\"memory-stats\">\n              <div>Total States: {emotionalArc.length}</div>\n              <div>Current Intensity: {(unifiedEmotionalState.intensity * 100).toFixed(0)}%</div>\n              <div>Voice Integration: {voiceEmotion ? \"Active\" : \"Inactive\"}</div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default UnifiedEmotionalAgent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}